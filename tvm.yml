- hosts: tvm-dev

  environment:
    # Set PATH so ansible.builtin.shell module can find 'west' command
    # once it's installed.
    PATH: "{{ ansible_env.HOME }}/.local/bin:{{ ansible_env.PATH }}"

########################
#### Install Zephyr ####
########################

  tasks:
  - name: Install necessary packages for Zephyr
    apt:
      pkg:
        - git
        - cmake
        - ninja-build
        - gperf
        - ccache
        - dfu-util
        - device-tree-compiler
        - wget
        - python3-dev
        - python3-pip
        - python3-setuptools
        - python3-tk
        - python3-wheel
        - xz-utils
        - file
        - make
        - gcc
        - gcc-multilib
        - g++-multilib
        - libsdl2-dev
        - minicom
    become: yes

  - name: Install west cli
    pip:
      name: west
      extra_args: "--user -U"

  - name: Add west cli to PATH
    blockinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      block: |
        export PATH=~/.local/bin:"$PATH"
      marker: '# {mark} ANSIBLE MANAGED BLOCK - west'
      insertafter: EOF

  - name: Get Zephyr v2.5-branch src and initialize its repo
    # Run task only once per playbook run
    run_once: true
    ansible.builtin.shell: |
      west init --mr v2.5-branch {{ ansible_env.HOME }}/zephyrproject
      cd {{ ansible_env.HOME }}/zephyrproject
      west update
      # Create zephyrproject/zephyr/scripts/requirements.txt
      west zephyr-export
    args:
      executable: /bin/bash
      # $HOME/zephyrproject exists, skip task
      creates: "{{ ansible_env.HOME }}/zephyrproject"
    notify: Install Zephyr Python dependencies

  - name: Download Zephyr SDK
    get_url:
      url: "https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.12.4/zephyr-sdk-0.12.4-{{ ansible_architecture }}-linux-setup.run"
      dest: "{{ ansible_env.HOME }}"
      mode: 0755
    notify: Install Zephyr SDK

  - name: Set Zephyr env
    blockinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      block: |
        . $HOME/zephyrproject/zephyr/zephyr-env.sh
      marker: '# {mark} ANSIBLE MANAGED BLOCK - Zephyr env'
      insertafter: EOF

##################################
#### Install TVM dependencies ####
##################################

  - name: Install TVM dependencies
    apt:
      pkg:
        - python3
        - python3-dev
        - python3-setuptools
        - gcc
        - git
        - libtinfo-dev
        - zlib1g-dev
        - build-essential
        - cmake
        - libedit-dev
        - libxml2-dev
        - qemu
        - qemu-utils
        - qemu-system-x86
        - qemu-system-arm
    become: yes

  - name: Install TVM Python dependencies
    pip:
      name:
        - numpy
        - decorator
        - attrs
        - tornado
        - psutil
        - scipy
        - tflite
        - onnx
      extra_args: "--user"

  - name: Download LLVM
    get_url:
      url: "https://apt.llvm.org/llvm.sh"
      dest: "{{ ansible_env.HOME }}"
      mode: 0755
    notify: Install LLVM

#####################
#### Install TVM ####
#####################

  - name: Clone TVM github repository
    ansible.builtin.git:
      repo: https://github.com/apache/tvm.git
      dest: "{{ ansible_env.HOME }}/git/tvm"
      recursive: yes

  - name: Set TVM_HOME and PYTHONPATH env vars
    blockinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      block: |
        export TVM_HOME="{{ ansible_env.HOME }}/git/tvm"
        export PYTHONPATH=$TVM_HOME/python:${PYTHONPATH}
      marker: '# {mark} ANSIBLE MANAGED BLOCK - TVM'
      insertafter: EOF

  - name: Create build dir
    ansible.builtin.file:
      path: "{{ ansible_env.HOME }}/git/tvm/build"
      state: directory
      mode: 0755

  - name: Copy TVM config file to build/ dir
    copy:
      src: "{{ playbook_dir }}/files/config.cmake"
      dest: "{{ ansible_env.HOME }}/git/tvm/build"

#### HANDLERS ####

# Handlers will be triggered only on certain events,
# in an synchronous way.

  handlers:
  - name: Install Zephyr Python dependencies
    pip:
      requirements: "{{ ansible_env.HOME }}/zephyrproject/zephyr/scripts/requirements.txt"
      extra_args: "--user"

  - name: Install Zephyr SDK
    # We need to use 'expect' here because the script has no automatic install process afaics
    expect:
      command: "{{ ansible_env.HOME }}/zephyr-sdk-0.12.4-{{ ansible_architecture }}-linux-setup.run"
      # That can be pretty slow on some machines
      timeout: null
      responses:
        "Enter target directory for SDK":
          - "\r"
    notify: Install OpenOCD

  - name: Install OpenOCD
    copy:
      src: "{{ ansible_env.HOME }}/zephyr-sdk/sysroots/{{ ansible_architecture }}-pokysdk-linux/usr/share/openocd/contrib/60-openocd.rules"
      dest: "/etc/udev/rules.d"
      remote_src: yes
    become: yes
    notify: udev reload

  - name: udev reload
    command: "udevadm control --reload"
    become: yes

  - name: Install LLVM
    command: "bash -c {{ ansible_env.HOME }}/llvm.sh"
    become: yes
